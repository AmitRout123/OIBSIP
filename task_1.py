# -*- coding: utf-8 -*-
"""task_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fpi0yveqPp5tVIhaU4Hn1Jm_VI0Zj_xw

IRIS FLOWER CLASSIFICATION

---

Iris flower classification is a very popular machine learning project. The iris dataset contains three classes of flowers, Versicolor, Setosa, Virginica, and each class contains 4 features, ‘Sepal length’, ‘Sepal width’, ‘Petal length’, ‘Petal width’. The aim of the iris flower classification is to predict flowers based on their specific features.
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/drive/MyDrive/Iris.csv")

df.head()

df

df.head()

df.columns = ['Id','SepalLength','SepalWidth','PetalLength','PetalWidth','Species']
df.head()

df.isnull().sum()

for i in df.columns:
 print(i,':','\n',df[i].unique(),'\n')

sns.distplot(df.SepalLength)
plt.show()

sns.displot(df.SepalLength)
plt.show()

sns.distplot(df.SepalLength[df.Species=='Iris-setosa'])

sns.distplot(df.SepalLength[df.Species=='Iris-virginica'])
sns.distplot(df.SepalLength[df.Species=='Iris-versicolor'])
plt.show()

sns.scatterplot(x=df.SepalLength,y=df.PetalLength,hue=df.Species)
plt.show()

sns.pairplot(df)
plt.show()

sns.pairplot(df,hue='Species')
plt.show()

d = df.drop('Species',axis=1)
d

c = d.corr()
c

df['Species'].replace({'Iris-setosa':0,'Iris-versicolor':1,'Iris-virginica':2},inplace=True)
df

x = pd.DataFrame(df,columns=['SepalLength','SepalWidth','PetalLength','PetalWidth']).values
x

y = df.Species.values.reshape(-1,1)
y

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(x_train,y_train)

pred = lr.predict(x_test)
pred

y_test

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

x_train.shape

y_train.shape

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train,y_train)